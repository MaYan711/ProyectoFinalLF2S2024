// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.flex

import com.mycompany.analexsin.Token;


@SuppressWarnings("fallthrough")
public class SQLLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\6\0\1\4"+
    "\1\5\1\6\2\7\1\10\1\7\1\11\1\7\12\12"+
    "\1\0\1\13\1\14\1\15\1\14\2\0\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\2\0"+
    "\1\27\1\30\1\31\1\32\2\0\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\10\0\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\2\0\1\27"+
    "\1\30\1\31\1\32\2\0\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\14\0\1\3\252\0\2\26\115\0"+
    "\1\34\u01a8\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\14\1"+
    "\1\0\1\16\1\0\1\14\12\0\1\17\6\0\1\20"+
    "\24\0\1\21\1\0\1\22\2\0\1\23\2\0\1\24"+
    "\12\0\1\25\2\0\1\26\1\0\1\27\2\0\1\30"+
    "\1\0\1\31\1\32\1\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\42\0\42\0\146\0\42\0\42"+
    "\0\42\0\42\0\42\0\210\0\42\0\252\0\42\0\314"+
    "\0\356\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc"+
    "\0\u01fe\0\u0220\0\u0242\0\146\0\42\0\u0264\0\42\0\u0286"+
    "\0\u02a8\0\u02ca\0\u02ec\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396"+
    "\0\u03b8\0\42\0\u03da\0\u03fc\0\u041e\0\u0440\0\u0462\0\u0484"+
    "\0\u0264\0\u04a6\0\u04c8\0\u04ea\0\u050c\0\u052e\0\u0550\0\u0572"+
    "\0\u0594\0\u05b6\0\u05d8\0\u05fa\0\u061c\0\u063e\0\u0660\0\u0682"+
    "\0\u06a4\0\u06c6\0\u06e8\0\u070a\0\u072c\0\42\0\u074e\0\42"+
    "\0\u0770\0\u0792\0\42\0\u07b4\0\u07d6\0\42\0\u07f8\0\u081a"+
    "\0\u083c\0\u085e\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908\0\u092a"+
    "\0\42\0\u094c\0\u096e\0\42\0\u0990\0\42\0\u09b2\0\u09d4"+
    "\0\42\0\u09f6\0\42\0\42\0\u0a18\0\42";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\2\1\24\2\2\1\25\2\2\1\26"+
    "\1\27\1\2\1\30\1\31\1\2\1\32\1\33\1\2"+
    "\43\0\1\3\40\0\4\34\1\35\35\34\11\0\1\36"+
    "\1\14\44\0\1\37\55\0\1\40\36\0\1\41\3\0"+
    "\1\42\42\0\1\43\24\0\1\44\3\0\1\45\35\0"+
    "\1\46\14\0\1\47\37\0\1\50\42\0\1\51\42\0"+
    "\1\52\30\0\1\53\35\0\1\54\3\0\1\55\10\0"+
    "\1\56\24\0\1\57\50\0\1\60\26\0\1\61\50\0"+
    "\1\52\44\0\1\62\47\0\1\63\31\0\1\64\54\0"+
    "\1\65\24\0\1\66\50\0\1\67\44\0\1\70\43\0"+
    "\1\71\1\72\41\0\1\52\33\0\1\73\31\0\1\74"+
    "\63\0\1\75\36\0\1\76\32\0\1\77\3\0\1\100"+
    "\30\0\1\101\45\0\1\102\42\0\1\103\30\0\1\104"+
    "\41\0\1\105\3\0\1\106\45\0\1\107\47\0\1\76"+
    "\35\0\1\110\33\0\1\111\41\0\1\112\7\0\1\113"+
    "\31\0\1\114\46\0\1\115\47\0\1\106\26\0\1\116"+
    "\55\0\1\117\23\0\1\120\54\0\1\121\37\0\1\75"+
    "\32\0\1\122\54\0\1\123\23\0\1\124\52\0\1\125"+
    "\44\0\1\126\32\0\1\127\35\0\1\130\43\0\1\131"+
    "\41\0\1\132\44\0\1\133\36\0\1\134\35\0\1\135"+
    "\45\0\1\136\35\0\1\137\41\0\1\140\60\0\1\141"+
    "\26\0\1\142\54\0\1\143\40\0\1\144\23\0\1\142"+
    "\54\0\1\106\44\0\1\145\34\0\1\106\45\0\1\106"+
    "\30\0\1\146\17\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2618];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Err